{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/bUSDC.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\n/**\r\n * @title bUSDC - Base USDC Test Token\r\n * @dev A mintable ERC20 token for testing Tap&Go Pay on Base Sepolia\r\n * This is a test stablecoin that simulates USDC functionality\r\n */\r\ncontract bUSDC is ERC20, Ownable, Pausable {\r\n    // Maximum supply for the test token (1 billion tokens)\r\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10**6; // 6 decimals like real USDC\r\n    \r\n    // Faucet limits\r\n    uint256 public constant FAUCET_AMOUNT = 1000 * 10**6; // 1000 tokens per faucet\r\n    uint256 public constant FAUCET_COOLDOWN = 24 hours; // 24 hour cooldown between faucet claims\r\n    \r\n    // Mapping to track last faucet claim time per address\r\n    mapping(address => uint256) public lastFaucetClaim;\r\n    \r\n    // Events\r\n    event FaucetClaimed(address indexed user, uint256 amount);\r\n    event TokensMinted(address indexed to, uint256 amount);\r\n    event TokensBurned(address indexed from, uint256 amount);\r\n    \r\n    constructor() ERC20(\"Base USDC Test\", \"bUSDC\") Ownable(msg.sender) {\r\n        // Mint initial supply to deployer for testing\r\n        _mint(msg.sender, 100_000 * 10**6); // 100k tokens\r\n    }\r\n    \r\n    /**\r\n     * @dev Mint tokens to a specific address (only owner)\r\n     * @param to Address to mint tokens to\r\n     * @param amount Amount of tokens to mint (in wei, 6 decimals)\r\n     */\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        require(totalSupply() + amount <= MAX_SUPPLY, \"bUSDC: Exceeds max supply\");\r\n        _mint(to, amount);\r\n        emit TokensMinted(to, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Burn tokens from a specific address (only owner)\r\n     * @param from Address to burn tokens from\r\n     * @param amount Amount of tokens to burn (in wei, 6 decimals)\r\n     */\r\n    function burn(address from, uint256 amount) external onlyOwner {\r\n        _burn(from, amount);\r\n        emit TokensBurned(from, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Faucet function - allows users to claim test tokens\r\n     * Users can claim once every 24 hours\r\n     */\r\n    function claimFaucet() external whenNotPaused {\r\n        require(\r\n            block.timestamp >= lastFaucetClaim[msg.sender] + FAUCET_COOLDOWN,\r\n            \"bUSDC: Faucet cooldown not expired\"\r\n        );\r\n        require(\r\n            totalSupply() + FAUCET_AMOUNT <= MAX_SUPPLY,\r\n            \"bUSDC: Faucet would exceed max supply\"\r\n        );\r\n        \r\n        lastFaucetClaim[msg.sender] = block.timestamp;\r\n        _mint(msg.sender, FAUCET_AMOUNT);\r\n        \r\n        emit FaucetClaimed(msg.sender, FAUCET_AMOUNT);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if an address can claim from faucet\r\n     * @param user Address to check\r\n     * @return canClaim True if user can claim from faucet\r\n     * @return timeUntilClaim Time until next claim is available (0 if can claim now)\r\n     */\r\n    function canClaimFaucet(address user) external view returns (bool canClaim, uint256 timeUntilClaim) {\r\n        uint256 lastClaim = lastFaucetClaim[user];\r\n        uint256 nextClaimTime = lastClaim + FAUCET_COOLDOWN;\r\n        \r\n        if (block.timestamp >= nextClaimTime) {\r\n            canClaim = true;\r\n            timeUntilClaim = 0;\r\n        } else {\r\n            canClaim = false;\r\n            timeUntilClaim = nextClaimTime - block.timestamp;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Pause the contract (only owner)\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpause the contract (only owner)\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Override transfer to respect pause state\r\n     */\r\n    function _update(address from, address to, uint256 value) internal override whenNotPaused {\r\n        super._update(from, to, value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get the number of decimals for this token (6, like real USDC)\r\n     */\r\n    function decimals() public pure override returns (uint8) {\r\n        return 6;\r\n    }\r\n}\r\n"
    },
    "contracts/Paymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./VendorRegistry.sol\";\r\n\r\n// UserOperation structure (ERC-4337)\r\nstruct UserOperation {\r\n    address sender;\r\n    uint256 nonce;\r\n    bytes initCode;\r\n    bytes callData;\r\n    uint256 callGasLimit;\r\n    uint256 verificationGasLimit;\r\n    uint256 preVerificationGas;\r\n    uint256 maxFeePerGas;\r\n    uint256 maxPriorityFeePerGas;\r\n    bytes paymasterAndData;\r\n    bytes signature;\r\n}\r\n\r\n// ERC-4337 interfaces (simplified for Base Sepolia)\r\ninterface IEntryPoint {\r\n    function getSenderAddress(bytes memory initCode) external;\r\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\r\n    function depositTo(address account) external payable;\r\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\r\n}\r\n\r\ninterface IAccount {\r\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds) external returns (uint256 validationData);\r\n}\r\n\r\n/**\r\n * @title Paymaster\r\n * @dev ERC-4337 Paymaster for sponsoring gas fees for verified users and vendors\r\n * Implements gasless transactions for Tap&Go Pay users\r\n */\r\ncontract Paymaster is Ownable, Pausable, ReentrancyGuard {\r\n    \r\n    // Gas sponsorship limits\r\n    struct GasLimits {\r\n        uint256 maxGasPerTransaction;    // Maximum gas per transaction\r\n        uint256 maxGasPerDay;           // Maximum gas per day per user\r\n        uint256 maxGasPerMonth;         // Maximum gas per month per user\r\n    }\r\n    \r\n    // User gas usage tracking\r\n    struct UserGasUsage {\r\n        uint256 dailyUsage;             // Gas used today\r\n        uint256 monthlyUsage;           // Gas used this month\r\n        uint256 lastDailyReset;         // Last daily reset timestamp\r\n        uint256 lastMonthlyReset;       // Last monthly reset timestamp\r\n        bool isWhitelisted;             // Whether user is whitelisted for unlimited gas\r\n    }\r\n    \r\n    // State variables\r\n    VendorRegistry public vendorRegistry;\r\n    IEntryPoint public entryPoint;\r\n    \r\n    // Gas limits\r\n    GasLimits public gasLimits;\r\n    \r\n    // User tracking\r\n    mapping(address => UserGasUsage) public userGasUsage;\r\n    mapping(address => bool) public whitelistedUsers; // Users with unlimited gas\r\n    \r\n    // Daily and monthly limits\r\n    uint256 public constant DAY_IN_SECONDS = 86400;\r\n    uint256 public constant MONTH_IN_SECONDS = 2592000; // 30 days\r\n    \r\n    // Events\r\n    event GasSponsored(\r\n        address indexed user,\r\n        uint256 gasUsed,\r\n        uint256 gasPrice,\r\n        uint256 totalCost\r\n    );\r\n    \r\n    event GasLimitsUpdated(\r\n        uint256 maxGasPerTransaction,\r\n        uint256 maxGasPerDay,\r\n        uint256 maxGasPerMonth\r\n    );\r\n    \r\n    event UserWhitelisted(address indexed user, bool whitelisted);\r\n    event PaymasterDeposited(uint256 amount);\r\n    event PaymasterWithdrawn(uint256 amount);\r\n    \r\n    // Modifiers\r\n    modifier onlyEntryPoint() {\r\n        require(msg.sender == address(entryPoint), \"Paymaster: Only EntryPoint can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner(), \"Paymaster: Only admin can call this function\");\r\n        _;\r\n    }\r\n    \r\n    constructor(\r\n        address _vendorRegistry,\r\n        address _entryPoint\r\n    ) Ownable(msg.sender) {\r\n        vendorRegistry = VendorRegistry(_vendorRegistry);\r\n        entryPoint = IEntryPoint(_entryPoint);\r\n        \r\n        // Set default gas limits\r\n        gasLimits = GasLimits({\r\n            maxGasPerTransaction: 500000,  // 500k gas per transaction\r\n            maxGasPerDay: 2000000,         // 2M gas per day\r\n            maxGasPerMonth: 50000000       // 50M gas per month\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @dev Validate a user operation and sponsor gas if eligible\r\n     * This is called by the EntryPoint during transaction validation\r\n     * @param userOp User operation to validate\r\n     * @param userOpHash Hash of the user operation\r\n     * @param maxCost Maximum cost the paymaster is willing to pay\r\n     * @return context Context data for post-operation\r\n     * @return validationData Validation data (0 = success)\r\n     */\r\n    function validatePaymasterUserOp(\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 maxCost\r\n    ) external onlyEntryPoint whenNotPaused returns (bytes memory context, uint256 validationData) {\r\n        address sender = userOp.sender;\r\n        \r\n        // Check if user is eligible for gas sponsorship\r\n        if (!_isEligibleForGasSponsorship(sender)) {\r\n            return (\"\", 1); // Reject the operation\r\n        }\r\n        \r\n        // Check gas limits\r\n        if (!_checkGasLimits(sender, userOp.callGasLimit)) {\r\n            return (\"\", 1); // Reject the operation\r\n        }\r\n        \r\n        // Check if paymaster has sufficient balance\r\n        if (address(this).balance < maxCost) {\r\n            return (\"\", 1); // Reject the operation\r\n        }\r\n        \r\n        // Return success with context\r\n        context = abi.encode(sender, maxCost);\r\n        validationData = 0; // Success\r\n    }\r\n    \r\n    /**\r\n     * @dev Post-operation callback (called after transaction execution)\r\n     * @param context Context data from validatePaymasterUserOp\r\n     * @param actualGasCost Actual gas cost of the transaction\r\n     */\r\n    function postOp(\r\n        bytes calldata context,\r\n        UserOperation calldata userOp,\r\n        bytes32 userOpHash,\r\n        uint256 actualGasCost\r\n    ) external onlyEntryPoint {\r\n        (address sender, uint256 maxCost) = abi.decode(context, (address, uint256));\r\n        \r\n        // Update user gas usage\r\n        _updateUserGasUsage(sender, actualGasCost);\r\n        \r\n        // Emit event\r\n        emit GasSponsored(sender, actualGasCost, userOp.maxFeePerGas, actualGasCost);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if a user is eligible for gas sponsorship\r\n     * @param user User address to check\r\n     * @return eligible True if user is eligible\r\n     */\r\n    function _isEligibleForGasSponsorship(address user) internal view returns (bool eligible) {\r\n        // Whitelisted users get unlimited gas\r\n        if (whitelistedUsers[user]) {\r\n            return true;\r\n        }\r\n        \r\n        // Check if user is a registered vendor\r\n        if (vendorRegistry.isVendor(user)) {\r\n            return true;\r\n        }\r\n        \r\n        // For now, allow all users (can be restricted later)\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if user's gas usage is within limits\r\n     * @param user User address\r\n     * @param gasToUse Gas that will be used\r\n     * @return withinLimits True if within limits\r\n     */\r\n    function _checkGasLimits(address user, uint256 gasToUse) internal view returns (bool withinLimits) {\r\n        // Whitelisted users have no limits\r\n        if (whitelistedUsers[user]) {\r\n            return true;\r\n        }\r\n        \r\n        // Check transaction gas limit\r\n        if (gasToUse > gasLimits.maxGasPerTransaction) {\r\n            return false;\r\n        }\r\n        \r\n        UserGasUsage memory usage = userGasUsage[user];\r\n        \r\n        // Reset daily usage if needed\r\n        if (block.timestamp >= usage.lastDailyReset + DAY_IN_SECONDS) {\r\n            usage.dailyUsage = 0;\r\n        }\r\n        \r\n        // Reset monthly usage if needed\r\n        if (block.timestamp >= usage.lastMonthlyReset + MONTH_IN_SECONDS) {\r\n            usage.monthlyUsage = 0;\r\n        }\r\n        \r\n        // Check daily limit\r\n        if (usage.dailyUsage + gasToUse > gasLimits.maxGasPerDay) {\r\n            return false;\r\n        }\r\n        \r\n        // Check monthly limit\r\n        if (usage.monthlyUsage + gasToUse > gasLimits.maxGasPerMonth) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update user's gas usage tracking\r\n     * @param user User address\r\n     * @param gasUsed Gas used in the transaction\r\n     */\r\n    function _updateUserGasUsage(address user, uint256 gasUsed) internal {\r\n        UserGasUsage storage usage = userGasUsage[user];\r\n        \r\n        // Reset daily usage if needed\r\n        if (block.timestamp >= usage.lastDailyReset + DAY_IN_SECONDS) {\r\n            usage.dailyUsage = 0;\r\n            usage.lastDailyReset = block.timestamp;\r\n        }\r\n        \r\n        // Reset monthly usage if needed\r\n        if (block.timestamp >= usage.lastMonthlyReset + MONTH_IN_SECONDS) {\r\n            usage.monthlyUsage = 0;\r\n            usage.lastMonthlyReset = block.timestamp;\r\n        }\r\n        \r\n        // Update usage\r\n        usage.dailyUsage += gasUsed;\r\n        usage.monthlyUsage += gasUsed;\r\n    }\r\n    \r\n    /**\r\n     * @dev Deposit ETH to the paymaster for gas sponsorship\r\n     */\r\n    function deposit() external payable onlyAdmin {\r\n        require(msg.value > 0, \"Paymaster: Deposit amount must be positive\");\r\n        \r\n        // Deposit to EntryPoint\r\n        entryPoint.depositTo{value: msg.value}(address(this));\r\n        \r\n        emit PaymasterDeposited(msg.value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw ETH from the paymaster\r\n     * @param amount Amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external onlyAdmin nonReentrant {\r\n        require(amount > 0, \"Paymaster: Withdraw amount must be positive\");\r\n        require(amount <= address(this).balance, \"Paymaster: Insufficient balance\");\r\n        \r\n        // Withdraw from EntryPoint\r\n        entryPoint.withdrawTo(payable(owner()), amount);\r\n        \r\n        emit PaymasterWithdrawn(amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update gas limits (admin only)\r\n     * @param maxGasPerTransaction Maximum gas per transaction\r\n     * @param maxGasPerDay Maximum gas per day per user\r\n     * @param maxGasPerMonth Maximum gas per month per user\r\n     */\r\n    function updateGasLimits(\r\n        uint256 maxGasPerTransaction,\r\n        uint256 maxGasPerDay,\r\n        uint256 maxGasPerMonth\r\n    ) external onlyAdmin {\r\n        require(maxGasPerTransaction > 0, \"Paymaster: Max gas per transaction must be positive\");\r\n        require(maxGasPerDay > 0, \"Paymaster: Max gas per day must be positive\");\r\n        require(maxGasPerMonth > 0, \"Paymaster: Max gas per month must be positive\");\r\n        \r\n        gasLimits = GasLimits({\r\n            maxGasPerTransaction: maxGasPerTransaction,\r\n            maxGasPerDay: maxGasPerDay,\r\n            maxGasPerMonth: maxGasPerMonth\r\n        });\r\n        \r\n        emit GasLimitsUpdated(maxGasPerTransaction, maxGasPerDay, maxGasPerMonth);\r\n    }\r\n    \r\n    /**\r\n     * @dev Whitelist/unwhitelist a user for unlimited gas\r\n     * @param user User address\r\n     * @param whitelisted Whether to whitelist the user\r\n     */\r\n    function setWhitelistedUser(address user, bool whitelisted) external onlyAdmin {\r\n        require(user != address(0), \"Paymaster: User address cannot be zero\");\r\n        \r\n        whitelistedUsers[user] = whitelisted;\r\n        userGasUsage[user].isWhitelisted = whitelisted;\r\n        \r\n        emit UserWhitelisted(user, whitelisted);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get user's current gas usage\r\n     * @param user User address\r\n     * @return dailyUsage Gas used today\r\n     * @return monthlyUsage Gas used this month\r\n     * @return dailyLimit Daily gas limit\r\n     * @return monthlyLimit Monthly gas limit\r\n     */\r\n    function getUserGasUsage(address user) external view returns (\r\n        uint256 dailyUsage,\r\n        uint256 monthlyUsage,\r\n        uint256 dailyLimit,\r\n        uint256 monthlyLimit\r\n    ) {\r\n        UserGasUsage memory usage = userGasUsage[user];\r\n        \r\n        // Reset daily usage if needed\r\n        if (block.timestamp >= usage.lastDailyReset + DAY_IN_SECONDS) {\r\n            usage.dailyUsage = 0;\r\n        }\r\n        \r\n        // Reset monthly usage if needed\r\n        if (block.timestamp >= usage.lastMonthlyReset + MONTH_IN_SECONDS) {\r\n            usage.monthlyUsage = 0;\r\n        }\r\n        \r\n        return (\r\n            usage.dailyUsage,\r\n            usage.monthlyUsage,\r\n            gasLimits.maxGasPerDay,\r\n            gasLimits.maxGasPerMonth\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if user can perform a transaction with given gas\r\n     * @param user User address\r\n     * @param gasToUse Gas that will be used\r\n     * @return canPerform True if user can perform the transaction\r\n     */\r\n    function canPerformTransaction(address user, uint256 gasToUse) external view returns (bool canPerform) {\r\n        return _isEligibleForGasSponsorship(user) && _checkGasLimits(user, gasToUse);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get paymaster balance in EntryPoint\r\n     * @return balance Paymaster balance\r\n     */\r\n    function getPaymasterBalance() external view returns (uint256 balance) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /**\r\n     * @dev Pause the paymaster (admin only)\r\n     */\r\n    function pause() external onlyAdmin {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpause the paymaster (admin only)\r\n     */\r\n    function unpause() external onlyAdmin {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency withdraw all funds (admin only)\r\n     */\r\n    function emergencyWithdraw() external onlyAdmin nonReentrant {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"Paymaster: No funds to withdraw\");\r\n        \r\n        entryPoint.withdrawTo(payable(owner()), balance);\r\n        \r\n        emit PaymasterWithdrawn(balance);\r\n    }\r\n    \r\n    /**\r\n     * @dev Receive function to accept ETH deposits\r\n     */\r\n    receive() external payable {\r\n        // Automatically deposit to EntryPoint\r\n        if (msg.value > 0) {\r\n            entryPoint.depositTo{value: msg.value}(address(this));\r\n            emit PaymasterDeposited(msg.value);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/PaymentRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./bUSDC.sol\";\r\nimport \"./VendorRegistry.sol\";\r\nimport \"./SubnameRegistrar.sol\";\r\n\r\n/**\r\n * @title PaymentRouter\r\n * @dev Handles bUSDC payments between users (P2P) and vendors\r\n * Supports P2P transfers, vendor payments, ENS resolution, QR/NFC payments\r\n * Emits Receipt events for transaction tracking\r\n */\r\ncontract PaymentRouter is Ownable, Pausable, ReentrancyGuard {\r\n    // Payment types\r\n    enum PaymentType {\r\n        P2P,         // 0 - Peer-to-peer transfer\r\n        VendorPay,   // 1 - Payment to vendor\r\n        QRPay,       // 2 - QR code payment\r\n        NFCPay       // 3 - NFC tap payment\r\n    }\r\n    \r\n    // Payment status\r\n    enum PaymentStatus {\r\n        Pending,     // 0 - Payment initiated but not completed\r\n        Completed,   // 1 - Payment successfully completed\r\n        Failed,      // 2 - Payment failed\r\n        Refunded     // 3 - Payment was refunded\r\n    }\r\n    \r\n    // Receipt structure for on-chain payment records\r\n    struct Receipt {\r\n        bytes32 orderId;           // Unique order identifier\r\n        string recipientENS;       // Recipient's ENS name (vendor or user)\r\n        address sender;            // Sender's address\r\n        address recipient;         // Recipient's address\r\n        uint256 amountGHS;         // Amount in GHS (for display)\r\n        uint256 amountUSDC;        // Amount in bUSDC (actual payment)\r\n        uint256 fxRate;            // Exchange rate used (GHS to USDC)\r\n        uint256 timestamp;         // Payment timestamp\r\n        PaymentType paymentType;   // Type of payment\r\n        PaymentStatus status;      // Payment status\r\n        string metadata;           // Additional metadata (JSON string)\r\n        bool isVendorPayment;      // Whether recipient is a vendor\r\n    }\r\n    \r\n    // State variables\r\n    bUSDC public busdcToken;\r\n    VendorRegistry public vendorRegistry;\r\n    SubnameRegistrar public subnameRegistrar;\r\n    \r\n    // Exchange rate management\r\n    uint256 public currentFxRate = 1e6; // 1 GHS = 1 USDC (6 decimals) - default rate\r\n    address public fxRateUpdater; // Address allowed to update exchange rates\r\n    \r\n    // Fee structure\r\n    uint256 public platformFeeBps = 25; // 0.25% platform fee (25 basis points)\r\n    address public feeRecipient; // Address to receive platform fees\r\n    \r\n    // Payment tracking\r\n    mapping(bytes32 => Receipt) public receipts; // orderId -> Receipt\r\n    mapping(address => bytes32[]) public userReceipts; // user -> array of orderIds\r\n    mapping(address => uint256) public vendorEarnings; // vendor -> total earnings\r\n    mapping(address => uint256) public userEarnings; // user -> total P2P earnings\r\n    \r\n    // Order ID generation\r\n    uint256 private orderCounter = 0;\r\n    \r\n    // Events\r\n    event PaymentInitiated(\r\n        bytes32 indexed orderId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 amountUSDC,\r\n        PaymentType paymentType\r\n    );\r\n    \r\n    event PaymentCompleted(\r\n        bytes32 indexed orderId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 amountUSDC,\r\n        uint256 platformFee,\r\n        uint256 recipientAmount\r\n    );\r\n    \r\n    event PaymentFailed(\r\n        bytes32 indexed orderId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        string reason\r\n    );\r\n    \r\n    event PaymentRefunded(\r\n        bytes32 indexed orderId,\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 amountUSDC\r\n    );\r\n    \r\n    event ExchangeRateUpdated(uint256 oldRate, uint256 newRate);\r\n    event PlatformFeeUpdated(uint256 oldFee, uint256 newFee);\r\n    event FeeRecipientUpdated(address oldRecipient, address newRecipient);\r\n    \r\n    // Modifiers\r\n    modifier onlyActiveVendor(address vendor) {\r\n        require(vendorRegistry.isActiveVendor(vendor), \"PaymentRouter: Vendor not active\");\r\n        _;\r\n    }\r\n    \r\n    modifier validRecipient(address recipient) {\r\n        require(recipient != address(0), \"PaymentRouter: Invalid recipient address\");\r\n        require(recipient != msg.sender, \"PaymentRouter: Cannot send to self\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFxRateUpdater() {\r\n        require(msg.sender == fxRateUpdater || msg.sender == owner(), \"PaymentRouter: Not authorized to update exchange rate\");\r\n        _;\r\n    }\r\n    \r\n    modifier validOrderId(bytes32 orderId) {\r\n        require(receipts[orderId].orderId != bytes32(0), \"PaymentRouter: Invalid order ID\");\r\n        _;\r\n    }\r\n    \r\n    constructor(\r\n        address _busdcToken,\r\n        address _vendorRegistry,\r\n        address _subnameRegistrar,\r\n        address _feeRecipient\r\n    ) Ownable(msg.sender) {\r\n        busdcToken = bUSDC(_busdcToken);\r\n        vendorRegistry = VendorRegistry(_vendorRegistry);\r\n        subnameRegistrar = SubnameRegistrar(payable(_subnameRegistrar));\r\n        feeRecipient = _feeRecipient;\r\n        fxRateUpdater = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Send P2P payment to any address\r\n     * @param recipient Recipient's address\r\n     * @param amountGHS Amount in GHS\r\n     * @param metadata Optional metadata\r\n     * @return orderId Generated order ID\r\n     */\r\n    function sendP2PPayment(\r\n        address recipient,\r\n        uint256 amountGHS,\r\n        string memory metadata\r\n    ) external validRecipient(recipient) whenNotPaused returns (bytes32 orderId) {\r\n        uint256 amountUSDC = (amountGHS * currentFxRate) / 1e6;\r\n        require(amountUSDC > 0, \"PaymentRouter: Amount too small\");\r\n        \r\n        orderId = _generateOrderId();\r\n        \r\n        // Create receipt\r\n        receipts[orderId] = Receipt({\r\n            orderId: orderId,\r\n            recipientENS: _getRecipientENS(recipient),\r\n            sender: msg.sender,\r\n            recipient: recipient,\r\n            amountGHS: amountGHS,\r\n            amountUSDC: amountUSDC,\r\n            fxRate: currentFxRate,\r\n            timestamp: block.timestamp,\r\n            paymentType: PaymentType.P2P,\r\n            status: PaymentStatus.Pending,\r\n            metadata: metadata,\r\n            isVendorPayment: vendorRegistry.isVendor(recipient)\r\n        });\r\n        \r\n        userReceipts[msg.sender].push(orderId);\r\n        userReceipts[recipient].push(orderId);\r\n        \r\n        emit PaymentInitiated(orderId, msg.sender, recipient, amountUSDC, PaymentType.P2P);\r\n        \r\n        return orderId;\r\n    }\r\n    \r\n    /**\r\n     * @dev Send payment to vendor (with QR/NFC support)\r\n     * @param vendor Vendor's address\r\n     * @param amountGHS Amount in GHS\r\n     * @param metadata JSON string with payment details\r\n     * @param paymentType QR or NFC payment type\r\n     * @return orderId Generated order ID\r\n     */\r\n    function sendVendorPayment(\r\n        address vendor,\r\n        uint256 amountGHS,\r\n        string memory metadata,\r\n        PaymentType paymentType\r\n    ) external onlyActiveVendor(vendor) whenNotPaused returns (bytes32 orderId) {\r\n        require(paymentType == PaymentType.QRPay || paymentType == PaymentType.VendorPay, \r\n                \"PaymentRouter: Invalid payment type for vendor\");\r\n        \r\n        uint256 amountUSDC = (amountGHS * currentFxRate) / 1e6;\r\n        require(amountUSDC > 0, \"PaymentRouter: Amount too small\");\r\n        \r\n        orderId = _generateOrderId();\r\n        \r\n        // Create receipt\r\n        receipts[orderId] = Receipt({\r\n            orderId: orderId,\r\n            recipientENS: _getVendorENS(vendor),\r\n            sender: msg.sender,\r\n            recipient: vendor,\r\n            amountGHS: amountGHS,\r\n            amountUSDC: amountUSDC,\r\n            fxRate: currentFxRate,\r\n            timestamp: block.timestamp,\r\n            paymentType: paymentType,\r\n            status: PaymentStatus.Pending,\r\n            metadata: metadata,\r\n            isVendorPayment: true\r\n        });\r\n        \r\n        userReceipts[msg.sender].push(orderId);\r\n        userReceipts[vendor].push(orderId);\r\n        \r\n        emit PaymentInitiated(orderId, msg.sender, vendor, amountUSDC, paymentType);\r\n        \r\n        return orderId;\r\n    }\r\n    \r\n    /**\r\n     * @dev Complete a payment by transferring bUSDC tokens\r\n     * @param orderId Order ID to complete\r\n     */\r\n    function completePayment(bytes32 orderId) external nonReentrant validOrderId(orderId) {\r\n        Receipt storage receipt = receipts[orderId];\r\n        require(receipt.status == PaymentStatus.Pending, \"PaymentRouter: Payment not pending\");\r\n        require(receipt.sender == msg.sender, \"PaymentRouter: Only sender can complete payment\");\r\n        \r\n        // Check sender has sufficient balance\r\n        require(\r\n            busdcToken.balanceOf(msg.sender) >= receipt.amountUSDC,\r\n            \"PaymentRouter: Insufficient bUSDC balance\"\r\n        );\r\n        \r\n        // Calculate fees (only for vendor payments)\r\n        uint256 platformFee = 0;\r\n        uint256 recipientAmount = receipt.amountUSDC;\r\n        \r\n        if (receipt.isVendorPayment) {\r\n            platformFee = (receipt.amountUSDC * platformFeeBps) / 10000;\r\n            recipientAmount = receipt.amountUSDC - platformFee;\r\n        }\r\n        \r\n        // Transfer tokens\r\n        require(\r\n            busdcToken.transferFrom(msg.sender, address(this), receipt.amountUSDC),\r\n            \"PaymentRouter: Transfer failed\"\r\n        );\r\n        \r\n        // Distribute payment\r\n        if (platformFee > 0) {\r\n            require(\r\n                busdcToken.transfer(feeRecipient, platformFee),\r\n                \"PaymentRouter: Fee transfer failed\"\r\n            );\r\n        }\r\n        \r\n        require(\r\n            busdcToken.transfer(receipt.recipient, recipientAmount),\r\n            \"PaymentRouter: Recipient transfer failed\"\r\n        );\r\n        \r\n        // Update receipt and earnings\r\n        receipt.status = PaymentStatus.Completed;\r\n        \r\n        if (receipt.isVendorPayment) {\r\n            vendorEarnings[receipt.recipient] += recipientAmount;\r\n        } else {\r\n            userEarnings[receipt.recipient] += recipientAmount;\r\n        }\r\n        \r\n        emit PaymentCompleted(orderId, receipt.sender, receipt.recipient, receipt.amountUSDC, platformFee, recipientAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Mark a payment as failed (admin or recipient only)\r\n     * @param orderId Order ID to mark as failed\r\n     * @param reason Reason for failure\r\n     */\r\n    function markPaymentFailed(bytes32 orderId, string memory reason) external validOrderId(orderId) {\r\n        Receipt storage receipt = receipts[orderId];\r\n        require(receipt.status == PaymentStatus.Pending, \"PaymentRouter: Payment not pending\");\r\n        require(\r\n            msg.sender == receipt.recipient || msg.sender == owner(),\r\n            \"PaymentRouter: Only recipient or admin can mark as failed\"\r\n        );\r\n        \r\n        receipt.status = PaymentStatus.Failed;\r\n        \r\n        emit PaymentFailed(orderId, receipt.sender, receipt.recipient, reason);\r\n    }\r\n    \r\n    /**\r\n     * @dev Refund a completed payment (admin only)\r\n     * @param orderId Order ID to refund\r\n     */\r\n    function refundPayment(bytes32 orderId) external onlyOwner validOrderId(orderId) nonReentrant {\r\n        Receipt storage receipt = receipts[orderId];\r\n        require(receipt.status == PaymentStatus.Completed, \"PaymentRouter: Payment not completed\");\r\n        \r\n        // Calculate refund amount (full amount, fees are not refunded)\r\n        uint256 refundAmount = receipt.amountUSDC;\r\n        \r\n        // Transfer refund to sender\r\n        require(\r\n            busdcToken.transfer(receipt.sender, refundAmount),\r\n            \"PaymentRouter: Refund transfer failed\"\r\n        );\r\n        \r\n        // Update receipt and earnings\r\n        receipt.status = PaymentStatus.Refunded;\r\n        \r\n        if (receipt.isVendorPayment) {\r\n            vendorEarnings[receipt.recipient] -= refundAmount;\r\n        } else {\r\n            userEarnings[receipt.recipient] -= refundAmount;\r\n        }\r\n        \r\n        emit PaymentRefunded(orderId, receipt.sender, receipt.recipient, refundAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update exchange rate (GHS to USDC)\r\n     * @param newRate New exchange rate (6 decimals)\r\n     */\r\n    function updateExchangeRate(uint256 newRate) external onlyFxRateUpdater {\r\n        require(newRate > 0, \"PaymentRouter: Exchange rate must be positive\");\r\n        \r\n        uint256 oldRate = currentFxRate;\r\n        currentFxRate = newRate;\r\n        \r\n        emit ExchangeRateUpdated(oldRate, newRate);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update platform fee\r\n     * @param newFeeBps New fee in basis points (100 = 1%)\r\n     */\r\n    function updatePlatformFee(uint256 newFeeBps) external onlyOwner {\r\n        require(newFeeBps <= 1000, \"PaymentRouter: Fee cannot exceed 10%\");\r\n        \r\n        uint256 oldFee = platformFeeBps;\r\n        platformFeeBps = newFeeBps;\r\n        \r\n        emit PlatformFeeUpdated(oldFee, newFeeBps);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update fee recipient\r\n     * @param newRecipient New fee recipient address\r\n     */\r\n    function updateFeeRecipient(address newRecipient) external onlyOwner {\r\n        require(newRecipient != address(0), \"PaymentRouter: Fee recipient cannot be zero address\");\r\n        \r\n        address oldRecipient = feeRecipient;\r\n        feeRecipient = newRecipient;\r\n        \r\n        emit FeeRecipientUpdated(oldRecipient, newRecipient);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update FX rate updater address\r\n     * @param newUpdater New FX rate updater address\r\n     */\r\n    function updateFxRateUpdater(address newUpdater) external onlyOwner {\r\n        require(newUpdater != address(0), \"PaymentRouter: FX rate updater cannot be zero address\");\r\n        fxRateUpdater = newUpdater;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get receipt by order ID\r\n     * @param orderId Order ID to query\r\n     * @return receipt Receipt struct\r\n     */\r\n    function getReceipt(bytes32 orderId) external view validOrderId(orderId) returns (Receipt memory receipt) {\r\n        return receipts[orderId];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get user's receipt IDs\r\n     * @param user User address\r\n     * @param offset Starting index\r\n     * @param limit Maximum number of receipts to return\r\n     * @return orderIds Array of order IDs\r\n     */\r\n    function getUserReceipts(\r\n        address user,\r\n        uint256 offset,\r\n        uint256 limit\r\n    ) external view returns (bytes32[] memory orderIds) {\r\n        bytes32[] storage userReceiptList = userReceipts[user];\r\n        require(offset < userReceiptList.length, \"PaymentRouter: Offset out of bounds\");\r\n        \r\n        uint256 end = offset + limit;\r\n        if (end > userReceiptList.length) {\r\n            end = userReceiptList.length;\r\n        }\r\n        \r\n        bytes32[] memory result = new bytes32[](end - offset);\r\n        for (uint256 i = offset; i < end; i++) {\r\n            result[i - offset] = userReceiptList[i];\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get vendor's total earnings\r\n     * @param vendor Vendor address\r\n     * @return earnings Total earnings in bUSDC\r\n     */\r\n    function getVendorEarnings(address vendor) external view returns (uint256 earnings) {\r\n        return vendorEarnings[vendor];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get user's total P2P earnings\r\n     * @param user User address\r\n     * @return earnings Total P2P earnings in bUSDC\r\n     */\r\n    function getUserEarnings(address user) external view returns (uint256 earnings) {\r\n        return userEarnings[user];\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate amount in USDC from GHS\r\n     * @param amountGHS Amount in GHS\r\n     * @return amountUSDC Amount in bUSDC\r\n     */\r\n    function calculateUSDCAmount(uint256 amountGHS) external view returns (uint256 amountUSDC) {\r\n        return (amountGHS * currentFxRate) / 1e6;\r\n    }\r\n    \r\n    /**\r\n     * @dev Generate unique order ID\r\n     * @return orderId Generated order ID\r\n     */\r\n    function _generateOrderId() internal returns (bytes32 orderId) {\r\n        orderCounter++;\r\n        return keccak256(abi.encodePacked(\r\n            block.timestamp,\r\n            block.number,\r\n            msg.sender,\r\n            orderCounter\r\n        ));\r\n    }\r\n    \r\n    /**\r\n     * @dev Get vendor's ENS name\r\n     * @param vendor Vendor address\r\n     * @return ensName Vendor's ENS name\r\n     */\r\n    function _getVendorENS(address vendor) internal view returns (string memory ensName) {\r\n        VendorRegistry.VendorProfile memory profile = vendorRegistry.getVendorProfile(vendor);\r\n        return profile.ensName;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get recipient's ENS name (vendor or user)\r\n     * @param recipient Recipient address\r\n     * @return ensName Recipient's ENS name\r\n     */\r\n    function _getRecipientENS(address recipient) internal view returns (string memory ensName) {\r\n        if (vendorRegistry.isVendor(recipient)) {\r\n            return _getVendorENS(recipient);\r\n        }\r\n        \r\n        // For regular users, try to get ENS from subname registrar\r\n        // This would be implemented when we have user ENS support\r\n        return \"\";\r\n    }\r\n    \r\n    /**\r\n     * @dev Pause the contract (admin only)\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpause the contract (admin only)\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency withdraw (admin only)\r\n     * @param token Token address to withdraw (0 for ETH)\r\n     * @param amount Amount to withdraw (0 for all)\r\n     */\r\n    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {\r\n        if (token == address(0)) {\r\n            // Withdraw ETH\r\n            uint256 ethAmount = amount == 0 ? address(this).balance : amount;\r\n            require(ethAmount > 0, \"PaymentRouter: No ETH to withdraw\");\r\n            \r\n            (bool success, ) = payable(owner()).call{value: ethAmount}(\"\");\r\n            require(success, \"PaymentRouter: ETH withdrawal failed\");\r\n        } else {\r\n            // Withdraw ERC20 tokens\r\n            require(token == address(busdcToken), \"PaymentRouter: Can only withdraw bUSDC\");\r\n            \r\n            uint256 tokenAmount = amount == 0 ? busdcToken.balanceOf(address(this)) : amount;\r\n            require(tokenAmount > 0, \"PaymentRouter: No tokens to withdraw\");\r\n            \r\n            require(busdcToken.transfer(owner(), tokenAmount), \"PaymentRouter: Token withdrawal failed\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/SubnameRegistrar.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"./VendorRegistry.sol\";\r\n\r\n// Real ENS Registry interface (Sepolia)\r\ninterface ENSRegistry {\r\n    function setSubnodeRecord(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external;\r\n    \r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n}\r\n\r\n// Real ENS Resolver interface (Sepolia)\r\ninterface ENSResolver {\r\n    function setAddr(bytes32 node, address a) external;\r\n    function setText(bytes32 node, string calldata key, string calldata value) external;\r\n    function addr(bytes32 node) external view returns (address);\r\n    function text(bytes32 node, string calldata key) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title SubnameRegistrar\r\n * @dev Manages ENS subnames under .tapngo.eth for verified vendors\r\n * Integrates with real Sepolia ENS registry for cross-chain resolution\r\n * This contract issues subnames only to vendors registered in VendorRegistry\r\n */\r\ncontract SubnameRegistrar is Ownable, Pausable {\r\n    \r\n    // State variables\r\n    VendorRegistry public vendorRegistry;\r\n    ENSRegistry public ensRegistry;\r\n    ENSResolver public ensResolver;\r\n    \r\n    // ENS node for .tapngo.eth (real namehash for tapngo.eth on Sepolia)\r\n    // This will be set when tapngo.eth is owned on Sepolia\r\n    bytes32 public tapngoNode;\r\n    \r\n    // Sepolia ENS Registry and Resolver addresses\r\n    address public constant SEPOLIA_ENS_REGISTRY = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e;\r\n    address public constant SEPOLIA_PUBLIC_RESOLVER = 0x231b0Ee14048e9dCcD1d247744d114a4EB5E8E63;\r\n    \r\n    // Mapping to track registered subnames\r\n    mapping(string => address) public subnameToOwner; // subname -> owner address\r\n    mapping(address => string[]) public ownerToSubnames; // owner -> array of subnames\r\n    mapping(string => bool) public subnameExists; // subname -> exists\r\n    \r\n    // Subname registration fee (in wei)\r\n    uint256 public registrationFee = 0; // Free for now, can be set by admin\r\n    \r\n    // Events\r\n    event SubnameRegistered(\r\n        string indexed subname,\r\n        address indexed owner,\r\n        address indexed vendor,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event SubnameTransferred(\r\n        string indexed subname,\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n    \r\n    event SubnameRevoked(string indexed subname, address indexed owner);\r\n    event RegistrationFeeUpdated(uint256 oldFee, uint256 newFee);\r\n    \r\n    // Modifiers\r\n    modifier onlyVendor() {\r\n        require(vendorRegistry.isVendor(msg.sender), \"SubnameRegistrar: Only registered vendors can register subnames\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyActiveVendor() {\r\n        require(vendorRegistry.isActiveVendor(msg.sender), \"SubnameRegistrar: Only active vendors can register subnames\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlySubnameOwner(string memory subname) {\r\n        require(subnameToOwner[subname] == msg.sender, \"SubnameRegistrar: Not the owner of this subname\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner(), \"SubnameRegistrar: Only admin can call this function\");\r\n        _;\r\n    }\r\n    \r\n    constructor(\r\n        address _vendorRegistry\r\n    ) Ownable(msg.sender) {\r\n        vendorRegistry = VendorRegistry(_vendorRegistry);\r\n        ensRegistry = ENSRegistry(SEPOLIA_ENS_REGISTRY);\r\n        ensResolver = ENSResolver(SEPOLIA_PUBLIC_RESOLVER);\r\n        // tapngoNode will be set when tapngo.eth is owned\r\n    }\r\n    \r\n    /**\r\n     * @dev Register a new ENS subname for a vendor\r\n     * @param subname The subname to register (e.g., \"business\" for business.tapngo.eth)\r\n     */\r\n    function registerSubname(string memory subname) external payable onlyActiveVendor whenNotPaused {\r\n        require(bytes(subname).length > 0, \"SubnameRegistrar: Subname cannot be empty\");\r\n        require(!subnameExists[subname], \"SubnameRegistrar: Subname already exists\");\r\n        require(msg.value >= registrationFee, \"SubnameRegistrar: Insufficient registration fee\");\r\n        require(tapngoNode != bytes32(0), \"SubnameRegistrar: tapngo.eth node not set\");\r\n        \r\n        // Get vendor profile to verify ENS name matches\r\n        VendorRegistry.VendorProfile memory profile = vendorRegistry.getVendorProfile(msg.sender);\r\n        require(bytes(profile.ensName).length > 0, \"SubnameRegistrar: Vendor must have ENS name set\");\r\n        \r\n        // Verify the subname matches the vendor's ENS name\r\n        string memory expectedSubname = _extractSubname(profile.ensName);\r\n        require(\r\n            keccak256(bytes(subname)) == keccak256(bytes(expectedSubname)),\r\n            \"SubnameRegistrar: Subname must match vendor's registered ENS name\"\r\n        );\r\n        \r\n        // Register the subname\r\n        subnameToOwner[subname] = msg.sender;\r\n        subnameExists[subname] = true;\r\n        ownerToSubnames[msg.sender].push(subname);\r\n        \r\n        // Register with real Sepolia ENS\r\n        bytes32 label = keccak256(bytes(subname));\r\n        ensRegistry.setSubnodeRecord(\r\n            tapngoNode,\r\n            label,\r\n            msg.sender,\r\n            address(ensResolver),\r\n            0 // TTL = 0 means use default\r\n        );\r\n        \r\n        // Set the address resolution\r\n        bytes32 node = keccak256(abi.encodePacked(tapngoNode, label));\r\n        ensResolver.setAddr(node, msg.sender);\r\n        \r\n        // Set text records for additional metadata\r\n        ensResolver.setText(node, \"description\", profile.businessName);\r\n        ensResolver.setText(node, \"url\", string(abi.encodePacked(\"https://tapngo.eth/\", subname)));\r\n        \r\n        emit SubnameRegistered(subname, msg.sender, msg.sender, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer ownership of a subname to another address\r\n     * @param subname The subname to transfer\r\n     * @param newOwner The new owner address\r\n     */\r\n    function transferSubname(string memory subname, address newOwner) external onlySubnameOwner(subname) {\r\n        require(newOwner != address(0), \"SubnameRegistrar: New owner cannot be zero address\");\r\n        require(newOwner != msg.sender, \"SubnameRegistrar: Cannot transfer to self\");\r\n        \r\n        address oldOwner = subnameToOwner[subname];\r\n        subnameToOwner[subname] = newOwner;\r\n        \r\n        // Update owner's subname list\r\n        _removeSubnameFromOwner(oldOwner, subname);\r\n        ownerToSubnames[newOwner].push(subname);\r\n        \r\n        // Update ENS record\r\n        bytes32 label = keccak256(bytes(subname));\r\n        bytes32 node = keccak256(abi.encodePacked(tapngoNode, label));\r\n        ensRegistry.setSubnodeRecord(\r\n            tapngoNode,\r\n            label,\r\n            newOwner,\r\n            address(ensResolver),\r\n            0\r\n        );\r\n        ensResolver.setAddr(node, newOwner);\r\n        \r\n        emit SubnameTransferred(subname, oldOwner, newOwner);\r\n    }\r\n    \r\n    /**\r\n     * @dev Revoke a subname (admin only)\r\n     * @param subname The subname to revoke\r\n     */\r\n    function revokeSubname(string memory subname) external onlyAdmin {\r\n        require(subnameExists[subname], \"SubnameRegistrar: Subname does not exist\");\r\n        \r\n        address owner = subnameToOwner[subname];\r\n        \r\n        // Remove from mappings\r\n        delete subnameToOwner[subname];\r\n        subnameExists[subname] = false;\r\n        _removeSubnameFromOwner(owner, subname);\r\n        \r\n        // Clear ENS record (set owner to zero address)\r\n        bytes32 label = keccak256(bytes(subname));\r\n        ensRegistry.setSubnodeRecord(\r\n            tapngoNode,\r\n            label,\r\n            address(0),\r\n            address(0),\r\n            0\r\n        );\r\n        \r\n        emit SubnameRevoked(subname, owner);\r\n    }\r\n    \r\n    /**\r\n     * @dev Set the tapngo.eth node (admin only)\r\n     * @param _tapngoNode The namehash of tapngo.eth\r\n     */\r\n    function setTapngoNode(bytes32 _tapngoNode) external onlyAdmin {\r\n        require(_tapngoNode != bytes32(0), \"SubnameRegistrar: Invalid node\");\r\n        tapngoNode = _tapngoNode;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update ENS resolver address (admin only)\r\n     * @param newResolver New resolver address\r\n     */\r\n    function updateResolver(address newResolver) external onlyAdmin {\r\n        require(newResolver != address(0), \"SubnameRegistrar: Resolver cannot be zero address\");\r\n        ensResolver = ENSResolver(newResolver);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update registration fee (admin only)\r\n     * @param newFee New registration fee in wei\r\n     */\r\n    function updateRegistrationFee(uint256 newFee) external onlyAdmin {\r\n        uint256 oldFee = registrationFee;\r\n        registrationFee = newFee;\r\n        emit RegistrationFeeUpdated(oldFee, newFee);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get all subnames owned by an address\r\n     * @param owner Address to query\r\n     * @return subnames Array of subnames owned by the address\r\n     */\r\n    function getSubnamesByOwner(address owner) external view returns (string[] memory subnames) {\r\n        return ownerToSubnames[owner];\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if a subname exists\r\n     * @param subname Subname to check\r\n     * @return exists True if subname exists\r\n     */\r\n    function isSubnameRegistered(string memory subname) external view returns (bool exists) {\r\n        return subnameExists[subname];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get owner of a subname\r\n     * @param subname Subname to query\r\n     * @return owner Address of the subname owner\r\n     */\r\n    function getSubnameOwner(string memory subname) external view returns (address owner) {\r\n        return subnameToOwner[subname];\r\n    }\r\n    \r\n    /**\r\n     * @dev Extract subname from full ENS name\r\n     * @param ensName Full ENS name (e.g., \"business.tapngo.eth\")\r\n     * @return subname Just the subname part (e.g., \"business\")\r\n     */\r\n    function _extractSubname(string memory ensName) internal pure returns (string memory subname) {\r\n        bytes memory ensBytes = bytes(ensName);\r\n        uint256 dotIndex = 0;\r\n        \r\n        // Find the first dot\r\n        for (uint256 i = 0; i < ensBytes.length; i++) {\r\n            if (ensBytes[i] == '.') {\r\n                dotIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        require(dotIndex > 0, \"SubnameRegistrar: Invalid ENS name format\");\r\n        \r\n        // Extract subname\r\n        bytes memory subnameBytes = new bytes(dotIndex);\r\n        for (uint256 i = 0; i < dotIndex; i++) {\r\n            subnameBytes[i] = ensBytes[i];\r\n        }\r\n        \r\n        return string(subnameBytes);\r\n    }\r\n    \r\n    /**\r\n     * @dev Remove subname from owner's list\r\n     * @param owner Owner address\r\n     * @param subname Subname to remove\r\n     */\r\n    function _removeSubnameFromOwner(address owner, string memory subname) internal {\r\n        string[] storage subnames = ownerToSubnames[owner];\r\n        for (uint256 i = 0; i < subnames.length; i++) {\r\n            if (keccak256(bytes(subnames[i])) == keccak256(bytes(subname))) {\r\n                subnames[i] = subnames[subnames.length - 1];\r\n                subnames.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw collected fees (admin only)\r\n     */\r\n    function withdrawFees() external onlyAdmin {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"SubnameRegistrar: No fees to withdraw\");\r\n        \r\n        (bool success, ) = payable(owner()).call{value: balance}(\"\");\r\n        require(success, \"SubnameRegistrar: Failed to withdraw fees\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Pause the contract (admin only)\r\n     */\r\n    function pause() external onlyAdmin {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpause the contract (admin only)\r\n     */\r\n    function unpause() external onlyAdmin {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Receive function to accept ETH\r\n     */\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/VendorRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\n/**\r\n * @title VendorRegistry\r\n * @dev Registry for managing vendor profiles and verification status\r\n * Stores vendor information including ENS names, phone verification, EFP verification, and EFPas scores\r\n */\r\ncontract VendorRegistry is Ownable, Pausable {\r\n    // Vendor status enum\r\n    enum VendorStatus {\r\n        Pending,    // 0 - Vendor registered but not approved\r\n        Active,     // 1 - Vendor approved and active\r\n        Suspended,  // 2 - Vendor suspended by admin\r\n        Rejected    // 3 - Vendor registration rejected\r\n    }\r\n    \r\n    // Vendor profile structure\r\n    struct VendorProfile {\r\n        address wallet;           // Vendor's wallet address\r\n        string ensName;          // ENS subname (e.g., \"business.tapngo.eth\")\r\n        string businessName;     // Business display name\r\n        string phoneHash;        // Hashed phone number for verification\r\n        bool phoneVerified;      // Phone verification status\r\n        bool efpVerified;        // Ethereum Follow Protocol verification\r\n        uint256 efpasScore;      // EFPas reputation score (0 if not available)\r\n        VendorStatus status;     // Current vendor status\r\n        uint256 registrationTime; // Timestamp of registration\r\n        uint256 lastUpdated;     // Timestamp of last profile update\r\n    }\r\n    \r\n    // State variables\r\n    mapping(address => VendorProfile) public vendors;\r\n    mapping(string => address) public ensToVendor; // ENS name -> vendor address\r\n    mapping(string => bool) public usedPhoneHashes; // Track used phone hashes\r\n    address[] public vendorAddresses; // Array of all vendor addresses\r\n    \r\n    // Verification requirements\r\n    bool public requirePhoneVerification = true;\r\n    bool public requireEFPVerification = true;\r\n    uint256 public minEFPasScore = 0; // Minimum EFPas score required (0 = not required)\r\n    \r\n    // Events\r\n    event VendorRegistered(\r\n        address indexed vendor,\r\n        string ensName,\r\n        string businessName,\r\n        string phoneHash\r\n    );\r\n    \r\n    event VendorApproved(address indexed vendor, string ensName);\r\n    event VendorSuspended(address indexed vendor, string reason);\r\n    event VendorRejected(address indexed vendor, string reason);\r\n    event VendorUpdated(address indexed vendor, string field);\r\n    event PhoneVerified(address indexed vendor, string phoneHash);\r\n    event EFPVerified(address indexed vendor, bool verified);\r\n    event EFPasScoreUpdated(address indexed vendor, uint256 score);\r\n    \r\n    // Modifiers\r\n    modifier onlyVendor() {\r\n        require(vendors[msg.sender].wallet != address(0), \"VendorRegistry: Not a registered vendor\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyActiveVendor() {\r\n        require(\r\n            vendors[msg.sender].wallet != address(0) && \r\n            vendors[msg.sender].status == VendorStatus.Active,\r\n            \"VendorRegistry: Not an active vendor\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner(), \"VendorRegistry: Only admin can call this function\");\r\n        _;\r\n    }\r\n    \r\n    constructor() Ownable(msg.sender) {}\r\n    \r\n    /**\r\n     * @dev Register a new vendor\r\n     * @param ensName ENS subname for the vendor (e.g., \"business.tapngo.eth\")\r\n     * @param businessName Display name of the business\r\n     * @param phoneHash Hashed phone number\r\n     */\r\n    function registerVendor(\r\n        string memory ensName,\r\n        string memory businessName,\r\n        string memory phoneHash\r\n    ) external whenNotPaused {\r\n        require(vendors[msg.sender].wallet == address(0), \"VendorRegistry: Vendor already registered\");\r\n        require(bytes(ensName).length > 0, \"VendorRegistry: ENS name cannot be empty\");\r\n        require(bytes(businessName).length > 0, \"VendorRegistry: Business name cannot be empty\");\r\n        require(bytes(phoneHash).length > 0, \"VendorRegistry: Phone hash cannot be empty\");\r\n        require(ensToVendor[ensName] == address(0), \"VendorRegistry: ENS name already taken\");\r\n        require(!usedPhoneHashes[phoneHash], \"VendorRegistry: Phone number already used\");\r\n        \r\n        // Create vendor profile\r\n        VendorProfile memory newVendor = VendorProfile({\r\n            wallet: msg.sender,\r\n            ensName: ensName,\r\n            businessName: businessName,\r\n            phoneHash: phoneHash,\r\n            phoneVerified: false,\r\n            efpVerified: false,\r\n            efpasScore: 0,\r\n            status: VendorStatus.Pending,\r\n            registrationTime: block.timestamp,\r\n            lastUpdated: block.timestamp\r\n        });\r\n        \r\n        vendors[msg.sender] = newVendor;\r\n        ensToVendor[ensName] = msg.sender;\r\n        usedPhoneHashes[phoneHash] = true;\r\n        vendorAddresses.push(msg.sender);\r\n        \r\n        emit VendorRegistered(msg.sender, ensName, businessName, phoneHash);\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve a vendor (admin only)\r\n     * @param vendorAddress Address of the vendor to approve\r\n     */\r\n    function approveVendor(address vendorAddress) external onlyAdmin {\r\n        require(vendors[vendorAddress].wallet != address(0), \"VendorRegistry: Vendor not found\");\r\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \"VendorRegistry: Vendor not pending\");\r\n        \r\n        // Check verification requirements\r\n        if (requirePhoneVerification) {\r\n            require(vendors[vendorAddress].phoneVerified, \"VendorRegistry: Phone verification required\");\r\n        }\r\n        if (requireEFPVerification) {\r\n            require(vendors[vendorAddress].efpVerified, \"VendorRegistry: EFP verification required\");\r\n        }\r\n        if (minEFPasScore > 0) {\r\n            require(vendors[vendorAddress].efpasScore >= minEFPasScore, \"VendorRegistry: EFPas score too low\");\r\n        }\r\n        \r\n        vendors[vendorAddress].status = VendorStatus.Active;\r\n        vendors[vendorAddress].lastUpdated = block.timestamp;\r\n        \r\n        emit VendorApproved(vendorAddress, vendors[vendorAddress].ensName);\r\n    }\r\n    \r\n    /**\r\n     * @dev Suspend a vendor (admin only)\r\n     * @param vendorAddress Address of the vendor to suspend\r\n     * @param reason Reason for suspension\r\n     */\r\n    function suspendVendor(address vendorAddress, string memory reason) external onlyAdmin {\r\n        require(vendors[vendorAddress].wallet != address(0), \"VendorRegistry: Vendor not found\");\r\n        require(vendors[vendorAddress].status == VendorStatus.Active, \"VendorRegistry: Vendor not active\");\r\n        \r\n        vendors[vendorAddress].status = VendorStatus.Suspended;\r\n        vendors[vendorAddress].lastUpdated = block.timestamp;\r\n        \r\n        emit VendorSuspended(vendorAddress, reason);\r\n    }\r\n    \r\n    /**\r\n     * @dev Reject a vendor registration (admin only)\r\n     * @param vendorAddress Address of the vendor to reject\r\n     * @param reason Reason for rejection\r\n     */\r\n    function rejectVendor(address vendorAddress, string memory reason) external onlyAdmin {\r\n        require(vendors[vendorAddress].wallet != address(0), \"VendorRegistry: Vendor not found\");\r\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \"VendorRegistry: Vendor not pending\");\r\n        \r\n        vendors[vendorAddress].status = VendorStatus.Rejected;\r\n        vendors[vendorAddress].lastUpdated = block.timestamp;\r\n        \r\n        emit VendorRejected(vendorAddress, reason);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update vendor's phone verification status (admin only)\r\n     * @param vendorAddress Address of the vendor\r\n     * @param verified Verification status\r\n     */\r\n    function updatePhoneVerification(address vendorAddress, bool verified) external onlyAdmin {\r\n        require(vendors[vendorAddress].wallet != address(0), \"VendorRegistry: Vendor not found\");\r\n        \r\n        vendors[vendorAddress].phoneVerified = verified;\r\n        vendors[vendorAddress].lastUpdated = block.timestamp;\r\n        \r\n        emit PhoneVerified(vendorAddress, vendors[vendorAddress].phoneHash);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update vendor's EFP verification status (admin only)\r\n     * @param vendorAddress Address of the vendor\r\n     * @param verified Verification status\r\n     */\r\n    function updateEFPVerification(address vendorAddress, bool verified) external onlyAdmin {\r\n        require(vendors[vendorAddress].wallet != address(0), \"VendorRegistry: Vendor not found\");\r\n        \r\n        vendors[vendorAddress].efpVerified = verified;\r\n        vendors[vendorAddress].lastUpdated = block.timestamp;\r\n        \r\n        emit EFPVerified(vendorAddress, verified);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update vendor's EFPas score (admin only)\r\n     * @param vendorAddress Address of the vendor\r\n     * @param score EFPas reputation score\r\n     */\r\n    function updateEFPasScore(address vendorAddress, uint256 score) external onlyAdmin {\r\n        require(vendors[vendorAddress].wallet != address(0), \"VendorRegistry: Vendor not found\");\r\n        \r\n        vendors[vendorAddress].efpasScore = score;\r\n        vendors[vendorAddress].lastUpdated = block.timestamp;\r\n        \r\n        emit EFPasScoreUpdated(vendorAddress, score);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update business name (vendor only)\r\n     * @param newBusinessName New business name\r\n     */\r\n    function updateBusinessName(string memory newBusinessName) external onlyVendor {\r\n        require(bytes(newBusinessName).length > 0, \"VendorRegistry: Business name cannot be empty\");\r\n        \r\n        vendors[msg.sender].businessName = newBusinessName;\r\n        vendors[msg.sender].lastUpdated = block.timestamp;\r\n        \r\n        emit VendorUpdated(msg.sender, \"businessName\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Get vendor profile by address\r\n     * @param vendorAddress Address of the vendor\r\n     * @return profile Vendor profile struct\r\n     */\r\n    function getVendorProfile(address vendorAddress) external view returns (VendorProfile memory profile) {\r\n        require(vendors[vendorAddress].wallet != address(0), \"VendorRegistry: Vendor not found\");\r\n        return vendors[vendorAddress];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get vendor address by ENS name\r\n     * @param ensName ENS name to look up\r\n     * @return vendorAddress Address of the vendor\r\n     */\r\n    function getVendorByENS(string memory ensName) external view returns (address vendorAddress) {\r\n        return ensToVendor[ensName];\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if an address is a registered vendor\r\n     * @param vendorAddress Address to check\r\n     * @return isRegistered True if address is a registered vendor\r\n     */\r\n    function isVendor(address vendorAddress) external view returns (bool isRegistered) {\r\n        return vendors[vendorAddress].wallet != address(0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if a vendor is active\r\n     * @param vendorAddress Address to check\r\n     * @return isActive True if vendor is active\r\n     */\r\n    function isActiveVendor(address vendorAddress) external view returns (bool isActive) {\r\n        return vendors[vendorAddress].wallet != address(0) && \r\n               vendors[vendorAddress].status == VendorStatus.Active;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get total number of registered vendors\r\n     * @return count Total number of vendors\r\n     */\r\n    function getVendorCount() external view returns (uint256 count) {\r\n        return vendorAddresses.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get all vendor addresses (for pagination)\r\n     * @param offset Starting index\r\n     * @param limit Maximum number of addresses to return\r\n     * @return addresses Array of vendor addresses\r\n     */\r\n    function getVendorAddresses(uint256 offset, uint256 limit) external view returns (address[] memory addresses) {\r\n        require(offset < vendorAddresses.length, \"VendorRegistry: Offset out of bounds\");\r\n        \r\n        uint256 end = offset + limit;\r\n        if (end > vendorAddresses.length) {\r\n            end = vendorAddresses.length;\r\n        }\r\n        \r\n        address[] memory result = new address[](end - offset);\r\n        for (uint256 i = offset; i < end; i++) {\r\n            result[i - offset] = vendorAddresses[i];\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update verification requirements (admin only)\r\n     * @param phoneRequired Whether phone verification is required\r\n     * @param efpRequired Whether EFP verification is required\r\n     * @param minScore Minimum EFPas score required\r\n     */\r\n    function updateVerificationRequirements(\r\n        bool phoneRequired,\r\n        bool efpRequired,\r\n        uint256 minScore\r\n    ) external onlyAdmin {\r\n        requirePhoneVerification = phoneRequired;\r\n        requireEFPVerification = efpRequired;\r\n        minEFPasScore = minScore;\r\n    }\r\n    \r\n    /**\r\n     * @dev Pause the contract (admin only)\r\n     */\r\n    function pause() external onlyAdmin {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpause the contract (admin only)\r\n     */\r\n    function unpause() external onlyAdmin {\r\n        _unpause();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}